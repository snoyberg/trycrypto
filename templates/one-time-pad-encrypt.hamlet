<hr>

<p>Your original message:

<textarea .form-control rows=3 readonly>#{cleartext}

<p>UTF-8 encoded into binary

<textarea .form-control rows=3 readonly>#{toBinary cleartextBS}

<p>The total number of bits of that string is #{length cleartextBS * 8}, here's a random bunch of bits of the same size:

<textarea .form-control rows=3 readonly>#{toBinary random}

<p>We can exclusive-or (XOR) these two binary values together, to get a new value, the pad:

<textarea .form-control rows=3 readonly>#{toBinary pad}

<p>
  That random value and the pad together can be XORed again to get
  back your original message. Each value on its own is completely
  uncrackable: it is entirely random data giving no indication of the
  original value.

<p>
  Passing around such a long string of 0s and 1s is difficult, so we
  usually use base64 encoding. The random string:

<textarea .form-control rows=3 readonly>#{unsafeByteString $ B64.encode random}

<p>And the pad:

<textarea .form-control rows=3 readonly>#{unsafeByteString $ B64.encode pad}